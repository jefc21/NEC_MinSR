# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NecMinSR
                                 A QGIS plugin
 software to support eutrophication level detection
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-30
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Eric Costa
        email                : jefc21@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QComboBox
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .eutrophication_dialog import NecMinSRDialog
import os.path

import processing
from qgis.analysis import QgsRasterCalculator, QgsRasterCalculatorEntry



class NecMinSR:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        path_output=""
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NecMinSR_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&NEC_MinSR')

        layers_source_training = ""

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('NecMinSR', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """
        self.dlg = NecMinSRDialog()

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/eutrophication/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'NEC_MinSR'),
            callback=self.run,
            parent=self.iface.mainWindow())

        #adicionar saÃ­da
        self.dlg.label_output.clear() 
        self.dlg.bt_output.clicked.connect(self.path_out)

        #atualiza lista de layers
        self.dlg.bt_update.clicked.connect(self.update_layers)

        #seleciona banda verde
        self.dlg.band_green.clear()
        self.dlg.band_green.currentIndexChanged.connect(self.select_band_green)

        #seleciona banda blue
        self.dlg.band_blue.clear()
        self.dlg.band_blue.currentIndexChanged.connect(self.select_band_blue)

        #seleciona banda red
        self.dlg.band_red.clear()
        self.dlg.band_red.currentIndexChanged.connect(self.select_band_red)

        #seleciona banda mid
        self.dlg.band_mid.clear()
        self.dlg.band_mid.currentIndexChanged.connect(self.select_band_mid)

        #seleciona banda near
        self.dlg.band_near.clear()
        self.dlg.band_near.currentIndexChanged.connect(self.select_band_near)
    
        #seleciona samples
        self.dlg.training.clear()
        self.dlg.training.currentIndexChanged.connect(self.select_training)

        self.dlg.player.clicked.connect(self.rodar)

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&NEC_MinSR'),
                action)
            self.iface.removeToolBarIcon(action)
    
    def rodar(self):
        out = "C:/Users/ericc/OneDrive/Imagens/Saved Pictures/saida_"
        band_blue = self.dlg.lineEdit_blue.text()
        band_green = self.dlg.lineEdit_green.text()
        band_red = self.dlg.lineEdit_red.text()
        band_mid = self.dlg.lineEdit_mid.text()
        band_near = self.dlg.lineEdit_near.text()
        source_samples = self.dlg.lineEdit_training.text()

        merge = processing.run("gdal:buildvirtualraster", {'INPUT':[band_red,band_green,band_blue],'RESOLUTION':0,'SEPARATE':True,'PROJ_DIFFERENCE':False,'ADD_ALPHA':False,'ASSIGN_CRS':None,'RESAMPLING':0,'SRC_NODATA':'','EXTRA':'','OUTPUT':out+"composition.vrt"})
        file_samples = self.samples(source_samples, band_green)
        print(file_samples)
       
        self.calculator([band_mid, band_red], out+"NDVI.TIF", type="default")
        self.calculator([band_green, band_near], out+"MNDWI.TIF", type="default")
        self.calculator([out+"NDVI.TIF", out+"MNDWI.TIF"], out+"NDVI_MNDWI.TIF", type="mult")


    def path_out(self):
        global path
        global path_output
        path = QFileDialog.getSaveFileName(self.dlg, "Salvar o   arquivo em: ", "", "*.TIF"),
        path_output=path[0][0]
        self.dlg.label_output.setText(path_output)

    def update_layers(self):
        a=QgsProject.instance()
        layers_names=[]
        global layers_source
        layers_source=[]
        algorithms = ["SVM", "KNN", "NB", "AD"]

        for layer in a.mapLayers().values():
            layers_names.append(layer.name())
            layers_source.append(layer.source())
        if(len(layers_names)>0):
            self.dlg.band_green.clear()
            self.dlg.band_blue.clear()
            self.dlg.band_red.clear()
            self.dlg.band_mid.clear()
            self.dlg.band_near.clear()
            self.dlg.training.clear()
            self.dlg.band_green.addItems(layers_names)
            self.dlg.band_blue.addItems(layers_names)
            self.dlg.band_red.addItems(layers_names)
            self.dlg.band_mid.addItems(layers_names)
            self.dlg.band_near.addItems(layers_names)
            self.dlg.training.addItems(layers_names)
            
        self.dlg.bt_algorithm.clear()
        self.dlg.bt_algorithm.addItems(algorithms)

    def select_band_green(self): 
        if(len(layers_source)>0):
            selectedLayerIndex = self.dlg.band_green.currentIndex()
            global layers_source_green
            layers_source_green=layers_source[selectedLayerIndex].replace( '\\' , '/')
            self.dlg.lineEdit_green.setText(layers_source_green)

    def select_band_blue(self): 
        if(len(layers_source)>0):
            selectedLayerIndex = self.dlg.band_blue.currentIndex()
            global layers_source_blue
            layers_source_blue=layers_source[selectedLayerIndex].replace( '\\' , '/')
            self.dlg.lineEdit_blue.setText(layers_source_blue)

    def select_band_red(self): 
        if(len(layers_source)>0):
            selectedLayerIndex = self.dlg.band_red.currentIndex()
            global layers_source_red
            layers_source_red=layers_source[selectedLayerIndex].replace( '\\' , '/')
            self.dlg.lineEdit_red.setText(layers_source_red)

    def select_band_mid(self): 
        if(len(layers_source)>0):
            selectedLayerIndex = self.dlg.band_mid.currentIndex()
            global layers_source_mid
            layers_source_mid=layers_source[selectedLayerIndex].replace( '\\' , '/')
            self.dlg.lineEdit_mid.setText(layers_source_mid)

    def select_band_near(self): 
        if(len(layers_source)>0):
            selectedLayerIndex = self.dlg.band_near.currentIndex()
            global layers_source_near
            layers_source_near=layers_source[selectedLayerIndex].replace( '\\' , '/')
            self.dlg.lineEdit_near.setText(layers_source_near)

    def select_training(self):
        if(len(layers_source)>0):
            selectedLayerIndex = self.dlg.training.currentIndex()
            global layers_source_training
            layers_source_training=layers_source[selectedLayerIndex].replace( '\\' , '/')
            self.dlg.lineEdit_training.setText(layers_source_training)

    def samples(self, file_samples, raster):
        generatepoints = (processing.run("native:generatepointspixelcentroidsinsidepolygons", {'INPUT_RASTER':raster,'INPUT_VECTOR':file_samples,'OUTPUT':'TEMPORARY_OUTPUT'})).get("OUTPUT")
        layer_samples = QgsVectorLayer(file_samples, file_samples.split("/")[-1], "ogr")

        rotulo = []
        a=0
        for feat in layer_samples.getFeatures():
            if (feat["rotulo"]=="sim"):
                elem = 1
            elif(feat["rotulo"]=="nao"):
                elem = 0
            rotulo.append([a,elem])
            a=a+1

        generatepoints.dataProvider().addAttributes([QgsField('x', QVariant.Double)])
        generatepoints.dataProvider().addAttributes([QgsField('y', QVariant.Double)])
        generatepoints.dataProvider().addAttributes([QgsField('rotulo', QVariant.Int)])
        
        generatepoints.updateFields()
        prov = generatepoints.dataProvider()
        generatepoints.startEditing()

        for feat in generatepoints.getFeatures():
            attrs = feat.attributes()
            geom = feat.geometry()

            x = geom.asPoint().x()
            y = geom.asPoint().y()
            r = rotulo[feat['poly_id']][1]

            feat.setAttribute('x', x)
            feat.setAttribute('y', y)
            feat.setAttribute('rotulo',r)

            generatepoints.updateFeature(feat)
        generatepoints.commitChanges()
        return generatepoints

    def calculator(self, bands, output, type="default"):
        entries = []
        #global layers_source_green
        #global layers_source_infrared
        #layers_source_green="C:/Users/ericc/OneDrive/Imagens/LC09_L1TP_119038_20240319_20240319_02_T1/LC09_L1TP_119038_20240319_20240319_02_T1_B5.TIF"
        #layers_source_infrared="C:/Users/ericc/OneDrive/Imagens/LC09_L1TP_119038_20240319_20240319_02_T1/LC09_L1TP_119038_20240319_20240319_02_T1_B3.TIF"
        layers_source_select=bands#[layers_source_green, layers_source_infrared]

        path_output = output#"C:/Users/ericc/OneDrive/Imagens/Saved Pictures/saida_ndwi.TIF"

        try:
            if(len(layers_source_select)==2):
                for i in range(0, len(layers_source_select)):

                    raster = layers_source_select[i]
                    context = QgsProcessingContext()
                    context.setProject(QgsProject.instance())
                    readRst = QgsProcessingUtils.mapLayerFromString(raster, context)
                    ras1 = QgsRasterCalculatorEntry()

                    ras1.raster = readRst
                    ras1.ref = "ext_lyr" + str(i+1) +"@1"
                    ras1.bandNumber = 1
                    entries.append(ras1)

                if (type=="default"):
                    formula = ' (' + entries[0].ref + ' - ' + entries[1].ref +')'+ '/' +' (' + entries[0].ref + ' + ' + entries[1].ref +')'
                else:
                    formula = ' (' + entries[0].ref + ' * ' + entries[1].ref +')'

                readRst = QgsRasterLayer(layers_source_select[0])
                #output = "C:/Users/ericc/OneDrive/Imagens/Saved Pictures/saida_ndwi.TIF"

                calc = QgsRasterCalculator(formula, path_output, 'GTiff', readRst.extent(), readRst.width(), readRst.height(), entries)
                calc.processCalculation()

                layer= QgsRasterLayer(path_output,path_output.split('/')[-1][:-4])
                QgsProject.instance().addMapLayer(layer)

                renderer = QgsSingleBandGrayRenderer(layer.dataProvider(), 1)

                ce = QgsContrastEnhancement(layer.dataProvider().dataType(0))
                ce.setContrastEnhancementAlgorithm(QgsContrastEnhancement.StretchToMinimumMaximum)

                ce.setMinimumValue(0)
                ce.setMaximumValue(1)

                renderer.setContrastEnhancement(ce)
                layer.setRenderer(renderer)

                layer.triggerRepaint()
        except:
            print("Error in Create map", "Can not create Create map, Exit")      
           

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        #if self.first_start == True:
        #    self.first_start = False
        #    self.dlg = NecMinSRDialog()

        self.update_layers()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

        
